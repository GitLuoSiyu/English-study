学会如何使用适配器搭建起数据源和视图界面的桥梁。高级控件篇第的一部分将围绕适配器讲解它是如何在某些高级控件发挥重要作用。本篇控件清单：
ListView 列表
Spinner 下拉列表
GridView 网格视图
ViewPaper 视图滑动切换工具



###Adapter
数据适配器，它的作用是把复杂的数据填充到指定的视图界面上，常用的两种Adapter有：ArrayAdapter、SimpleAdapter

- ArrayAdpater
用于绑定单一的数据、数据源是数组或集合

- SimpleAdapter
用于绑定格式复杂的数据，数据源是特定的泛型集合。


#####1.ListView列表
ListView是最常见的控件之一，类似HTML里的ol和ul，这里的ListView能够根据数据的长度自适应显示。
```
// ListView
<ListView
  android:layout_width="match_parent"
  android:layout_height="match_parent"
  android:id="@+id/listView"	
/>
```

在MainActivity通过id找到布局中的ListView后，就可以加载适配器了。
```
public class MainActivity extends AppCompatActivity {
  private ListView listView;
  private ArrayAdapter<string> arr_adapter;

  @Override
  protected void onCreate(Bundle savedInstaceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    listView = (ListView) findViewById(R.id.listView);

    // 1.准备数据源
    String arr_data[] = {"hello", "world", "android", "flutter", "kotlin"};

    // 2.新建一个数组适配器arr_adapter (上下文，当前ListView加载的每一个列表项所对应的布局文件，数据源)

    // 适配器加载数据源 arr_data[] （数据源包含多少个列表项由数据源 的个数决定）
    arr_adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, arr_data);

    // 3.listView加载适配器
    listView.setAdapter(arr_adapter);  
  }

}

```
在此过程中主要是3个步骤：数据源准备->适配器加载数据源->控件加载适配器。在关键的第二步对ArrayAdpater初始化中，提供的三个参数完成了在哪里显示、每一项数据如何显示、显示哪些数据以及有多少项这些任务，最后set到ListView上，就实现了一开始看到的界面效果。






#####2.Spinner下拉列表







#####3.GridView网格视图








#####4.ViewPaper视图滑动切换工具






#####5.ScrollView滚动视图








#####6.ProgressBar进度条






#####7.ProgressDialog对话框式进度条









#####8.SeekBar
可拖动进度条




#####9.DataPicker
日历选择器







#####10.DataPickerDialog对话框形式日历选择器







#####11.TimePicker时间选择器






#####12.TimePickerDialog
对话框形式时间选择器





#####13.WebView网络视图







#####14.Dialog对话框






#####15.Notification通知









#####16.Meau菜单

















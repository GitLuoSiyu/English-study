###前言
Flutter 应用框架 Fish-Redux，面向当下，面向未来。
跨平台、高性能的渲染引擎逐渐成为大前端领域的一个热点，作为其中的明星Flutter,有极大的机会成为下一代跨端解决方案，闲鱼重磅生根Flutter， 推出了2亿用户背后的应用框架Fish-Redux。
应用框架的设计原则和分层架构思想，闲鱼的Fish-Redux基于ReduxJS作出诸多改良，成为一款热门的Flutter状态管理开源框架。


###Flutter技术栈背景
Flutter是谷歌推出的一个高性能跨平台渲染方案，主要有三个特点：
// 图1

#####1.原生性能
- 渲染方式、AOT、无锁GC

它主要用过原生的方式渲染，从分层的角度，无论是Android还是ios，都是基于相同一层的scale，在Release模式（Flutter有四种运行模式:Debug、Release、Profile和test）下会使用AOT预编译代码为机器码，然后相当于得到一个最短的一个渲染管线和更好的性能，


#####2.快速开发
- 亚秒级、有状态的热重载
JIT的模式带来更快的启动体验，相对于native，我们修改一处代码，flutter可以快速的实时更新和展现、实时的响应，也许只需要1-2秒之间就能得到一个快速的热重载。

#####3.统一的应用开发体验
- 两端一致的开发方式，MD和IOS风格


#####目前跨平台方案三驾马车

#####1.基于浏览器
目前基于浏览器的跨平台也做得越来越好，自然管线也越来越短，与native的一些技术手段来实现性能上的相互补充。

#####2.类似RN、WEEX
上层通过面向前端友好的UI，下层通过native的渲染形式，H5与native相互补充来达到更好的用户体验，这也是一种很好的解决方案。

#####3.Flutter
从底层就承担跨端的任务和渲染方式，从目前来看，从技术的实现和方案的成熟度、产品的性能方面比较，Flutter有很大可能成为下一代主流跨平台框架。

###Fish-Redux设计思路
在FR诞生之前，闲鱼团队初次使用Flutter遇到的一些问题：
// 图

这些常见问题，终于导致团队开发效率降低、代码质量变差。当出现这些问题时，我们复盘就可以知道一旦出现这种代码难以维护的问题，一般来说都是因为在软件层次里面缺少了某一层，导致了这些问题变得越来越复杂。这个时候我们就需要寻求那一层的设计来帮助我们解决之前遇到的各种小问题，简单来说，我们可能需要一层应用框架，来衔接Flutter和我们的上层业务之间，通过一个框架来使得我们遇到的问题能够统一地得到管理和解决。

在设计Fish-Redux之前，闲鱼团队也层对业界已有的框架进行过考虑和筛选。
#####1.业界方案-BLoC
// 图
Business Logic Component，BLoC，由谷歌开发推出，它的思路是把UI和逻辑分离，并且UI可以分得很细，整个方案由一定的分治关系；但是逻辑是统一的，这样做的优点是逻辑和UI分离、便于测试、一定的逻辑重用。缺点是没有办法对逻辑做更进一步的分治，虽然UI可以分治，但是逻辑的不可分治问题会随着业务逻辑的增大而复杂，最终变得庞大而难以管理。

#####2.业界方案-Redux
在前面的文章我也有介绍过，Redux是一款状态管理库，并且在闲鱼推出Fish-Redux之前，谷歌推出了Flutter-Redux这个方案，它与前端熟知的ReactJS社区里的Redux方案几乎一致，但是基于Dart 和 JS 语言上的差异，它没有做到把一个Reducer 变成若干个Reducer一层层分治的效果。在谷歌的Flutter-Redux中，它的工作流程如下图所示：
// 图
它有唯一的一个store，直接对应下面的view，通过action的形式将数据流驱动起来，优点很明显，就是集中的数据管理、方便观察并且容易调试，并且有Middleware中间件机制更加相对容易拓展。但缺点是 把数据和逻辑集中了，但是很难把这一块的东西分治出来，在庞大复杂的业务中更应该将UI和数据逻辑分离开来，不能只是将UI分治了，而逻辑还混在一起，如果这样也会导致最终项目难以维护。




###Fish-Redux设计原则和分层
// 图
它的设计原则会满足三个条件：适合、足够简单、便于演进

#####1.适合
在做软件分层的时候，每一层

#####2.足够简单



#####3.便于演进


```


```


###Fish-Redux相关问点



Flutter 应用框架 Fish-Redux 
面向当下、面向未来

Flutter 

- 原生性能
 渲染方式、AOT、无锁GC

- 快速开发
 亚秒级、有状态的热重载

- 统一的应用开发体验
 两端一致的开发方式，MD和IOS风格


闲鱼背景

缺点：
代码可读性差、
代码可复用性低
没有统一的代码规范
UI代码业务代码耦合高
线上小问题颇多
代码复杂度上升快

核心： 效率低、质量差


造轮子之前，做过业界方案的调研
比如BLoC

Business Logic Component
好处是 逻辑和UI分离
便于测试
一定的逻辑重用

Redux方案
优点是：数据集中管理
可观察、容易调试、灵活容易拓展

缺点：数据和逻辑集中了，但很难分治出来

跨平台移动端的三驾马车：浏览器 RN Flutter 
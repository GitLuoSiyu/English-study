###前言
Vue3即将发布，除了新增的特性支持PWA、TypeScript之外，还有虚拟DOM性能上的提升，以及Vue双向数据绑定的一个底层变化。对比NG的脏数据检测，今天一起来看一下Vue是如何实现数据劫持的。

###Vue3

###Vue2.x
Vue 内部使用了 Obeject.defineProperty() 来实现双向绑定，通过这个函数可以
监听到 set 和 get 的事件。
```
var data = { name: 'yck' }
observe(data)
let name = data.name // -> get value
data.name = 'yyy' // -> change value
function observe(obj) {
 // 判断类型
 if (!obj || typeof obj !== 'object') {
 return
 }
 Object.keys(data).forEach(key => {
 defineReactive(data, key, data[key])
 })
}
function defineReactive(obj, key, val) {
 // 递归子属性
 observe(val)
 Object.defineProperty(obj, key, {
 enumerable: true,
 configurable: true,
 get: function reactiveGetter() {
 console.log('get value')
 return val
 },
 set: function reactiveSetter(newVal) {
 console.log('change value')
 val = newVal
 }
 })
}
```
以上代码简单的实现了如何监听数据的 set 和 get 的事件，但是仅仅如此是不够
的，还需要在适当的时候给属性添加发布订阅
```
<div>
 {{name}}
</div>

```
在解析如上模板代码时，遇到 {{name}} 就会给属性 name 添加发布订阅
```
// 通过 Dep 解耦
class Dep {
 constructor() {
 this.subs = []
 }
 addSub(sub) {
 // sub 是 Watcher 实例
 this.subs.push(sub)
 }
 notify() {
 this.subs.forEach(sub => {
 sub.update()
 })
 }
}
// 全局属性，通过该属性配置 Watcher
Dep.target = null
function update(value) {
 document.querySelector('div').innerText = value
}
class Watcher {
 constructor(obj, key, cb) {
 // 将 Dep.target 指向自己
 // 然后触发属性的 getter 添加监听
 // 最后将 Dep.target 置空
 Dep.target = this
 this.cb = cb
 this.obj = obj
 this.key = key
 this.value = obj[key]
 Dep.target = null
 }
 update() {
 // 获得新值
 this.value = this.obj[this.key]
 // 调用 update 方法更新 Dom
 this.cb(this.value)
 }
}
var data = { name: 'yck' }
observe(data)

// 模拟解析到 `{{name}}` 触发的操作
new Watcher(data, 'name', update)
// update Dom innerText
data.name = 'yyy'
接下来,对 defineReactive 函数进行改造
function defineReactive(obj, key, val) {
 // 递归子属性
 observe(val)
 let dp = new Dep()
 Object.defineProperty(obj, key, {
 enumerable: true,
 configurable: true,
 get: function reactiveGetter() {
 console.log('get value')
 // 将 Watcher 添加到订阅
 if (Dep.target) {
 dp.addSub(Dep.target)
 }
 return val
 },
 set: function reactiveSetter(newVal) {
 console.log('change value')
 val = newVal
 // 执行 watcher 的 update 方法
 dp.notify()
 }
 })
}
```
以上实现了一个简易的双向绑定，核心思路就是手动触发一次属性的 getter 来实
现发布订阅的添加。


###对比
Obeject.defineProperty 虽然已经能够实现双向绑定了，但是他还是有缺陷的。
只能对属性进行数据劫持，所以需要深度遍历整个对象
对于数组不能监听到数据的变化
虽然 Vue 中确实能检测到数组数据的变化，但是其实是使用了 hack 的办法，并
且也是有缺陷的。
```
const arrayProto = Array.prototype
export const arrayMethods = Object.create(arrayProto)
// hack 以下几个函数
const methodsToPatch = [
 'push',
 'pop',

 'shift',
 'unshift',
 'splice',
 'sort',
 'reverse'
]
methodsToPatch.forEach(function (method) {
 // 获得原生函数
 const original = arrayProto[method]
 def(arrayMethods, method, function mutator (...args) {
 // 调用原生函数
 const result = original.apply(this, args)
 const ob = this.__ob__
 let inserted
 switch (method) {
 case 'push':
 case 'unshift':
 inserted = args
 break
 case 'splice':
 inserted = args.slice(2)
 break
 }
 if (inserted) ob.observeArray(inserted)
 // 触发更新
 ob.dep.notify()
 return result
 })
})

```

###Vue3
反观 Proxy 就没以上的问题，原生支持监听数组变化，并且可以直接对整个对象
进行拦截，所以 Vue 也将在下个大版本中使用 Proxy 替换 Obeject.defineProperty

```
let onWatch = (obj, setBind, getLogger) => {
 let handler = {
 get(target, property, receiver) {
 getLogger(target, property)
 return Reflect.get(target, property, receiver);
 },
 set(target, property, value, receiver) {
 setBind(value);
 return Reflect.set(target, property, value);
 }
 };
 return new Proxy(obj, handler);
};
let obj = { a: 1 }
let value
let p = onWatch(obj, (v) => {
 value = v
}, (target, property) => {
 console.log(`Get '${property}' = ${target[property]}`);
})
p.a = 2 // bind `value` to `2`
p.a // -> Get 'a' = 2
```



























